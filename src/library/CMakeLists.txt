CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(PR_Src
  PR_Config.h.in
  FileLogListener.cpp
  FileLogListener.h
  IFreezable.cpp
  IFreezable.h
  Logger.cpp
  Logger.h
  LogListener.h
  Random.h
  Variant.h
  VectorGlue.inl
  buffer/ColorBuffer.cpp
  buffer/ColorBuffer.h
  buffer/Feedback.h
  buffer/FrameBuffer.h
  buffer/OutputBuffer.cpp
  buffer/OutputBuffer.h
  camera/ICamera.cpp
  camera/ICamera.h
  container/IndexSort.h
  container/kdTreeBuilder.cpp
  container/kdTreeBuilder.h
  container/kdTreeBuilderNaive.cpp
  container/kdTreeBuilderNaive.h
  container/kdTreeCollider.cpp
  container/kdTreeCollider.h
  container/RadixSort.h
  entity/IEntity.cpp
  entity/IEntity.h
  entity/IEntity.inl
  entity/VirtualEntity.cpp
  entity/VirtualEntity.h
  entity/VirtualEntity.inl
  emission/IEmission.cpp
  emission/IEmission.h
  geometry/BoundingBox.cpp
  geometry/BoundingBox.h
  geometry/Face.h
  geometry/GeometryPoint.h
  geometry/Plane.cpp
  geometry/Plane.h
  geometry/Sphere.cpp
  geometry/Sphere.h
  geometry/Triangle.h
  infinitelight/IInfiniteLight.cpp
  infinitelight/IInfiniteLight.h
  integrator/IIntegrator.cpp
  integrator/IIntegrator.h
  material/IMaterial.cpp
  material/IMaterial.h
  material/IMaterial.inl
  math/Compression.h
  math/Fresnel.h
  math/Generator.h
  math/HemiMap.h
  math/MSI.h
  math/Projection.h
  math/ProjectionMap.h
  math/Reflection.h
  math/SIMath.h
  math/SIMathConstants.h
  math/SIMathStd.h
  math/SIMathUtils.h
  math/SphereMap.h
  math/Spherical.h
  math/Tangent.h
  mesh/TriMesh.cpp
  mesh/TriMesh.h
  mesh/TriMesh.inl
  path/LightPath.cpp
  path/LightPath.h
  path/LightPathExpression.cpp
  path/LightPathExpression.h
  path/LightPathManager.cpp
  path/LightPathManager.h
  path/LightPathToken.h
  path/LPE_Automaton.cpp
  path/LPE_Automaton.h
  path/LPE_Parser.cpp
  path/LPE_Parser.h
  path/LPE_RegExpr.cpp
  path/LPE_RegExpr.h
  path/LPE_RegState.h
  photon/Photon.h
  photon/PhotonMap.h
  photon/PhotonMap.inl
  ray/RayStream.cpp
  ray/RayStream.h
  renderer/RenderContext.cpp
  renderer/RenderContext.h
  renderer/RenderEnums.h
  renderer/RenderFactory.cpp
  renderer/RenderFactory.h
  renderer/RenderSettings.h
  renderer/RenderTileStatistics.h
  renderer/RenderStatus.h
  renderer/RenderSettings.cpp
  renderer/RenderStatus.cpp
  renderer/RenderThread.cpp
  renderer/RenderThread.h
  renderer/RenderThreadStatistics.cpp
  renderer/RenderThreadStatistics.h
  renderer/RenderTile.cpp
  renderer/RenderTile.h
  renderer/RenderTileMap.cpp
  renderer/RenderTileMap.h
  renderer/RenderTileSession.cpp
  renderer/RenderTileSession.h
  renderer/RenderTileSession.inl
  renderer/RenderTileStatistics.cpp
  sampler/HaltonSampler.cpp
  sampler/HaltonSampler.h
  sampler/MultiJitteredSampler.cpp
  sampler/MultiJitteredSampler.h
  sampler/RandomSampler.cpp
  sampler/RandomSampler.h
  sampler/Sampler.h
  sampler/SobolSampler.cpp
  sampler/SobolSampler.h
  sampler/SplitSample.h
  sampler/StratifiedSampler.cpp
  sampler/StratifiedSampler.h
  sampler/UniformSampler.cpp
  sampler/UniformSampler.h
  scene/Scene.cpp
  scene/Scene.h
  scene/Scene.inl
  spectral/IntensityConverter.cpp
  spectral/IntensityConverter.h
  spectral/RGBConverter.cpp
  spectral/RGBConverter.h
  spectral/Spectrum.cpp
  spectral/Spectrum.h
  spectral/Spectrum.inl
  spectral/SpectrumDescriptor.cpp
  spectral/SpectrumDescriptor.h
  spectral/SpectrumDescriptor.inl
  spectral/SpectrumLazyOperator.h
  spectral/ToneMapper.cpp
  spectral/ToneMapper.h
  spectral/XYZConverter.cpp
  spectral/XYZConverter.h
  spectral/xyz2spec.inl
  shader/ShadingGroup.h
  shader/ShadingPoint.h
  shader/ShadingSocket.h
  thread/Thread.cpp
  thread/Thread.h
  thread/Thread.inl
  trace/HitEntry.h
  trace/HitStream.cpp
  trace/HitStream.h
  trace/ShadowHit.h
)

add_library(pr_lib SHARED ${PR_Src})
if(NOT WIN32)
  target_link_libraries(pr_lib pthread )
endif()
target_link_libraries(pr_lib ${CMAKE_DL_LIBS} ${Boost_LIBRARIES} ${TBB_LIBRARIES})

set_target_properties(pr_lib PROPERTIES VERSION ${PR_Version})
set_target_properties(pr_lib PROPERTIES CXX_VISIBILITY_PRESET hidden)
target_compile_definitions(pr_lib PRIVATE "${DEFS};PR_LIB_BUILD" "$<$<CONFIG:Debug>:${DEFS_DEBUG}>")

IF(PR_CPP_CHECK)
add_cpplint_target(pr_lib_cppcheck "${PR_Src}")
ENDIF()