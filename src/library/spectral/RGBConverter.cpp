#include "RGBConverter.h"
#include "XYZConverter.h"

#include "PearMath.h"

#include "Diagnosis.h"

namespace PR
{
	void RGBConverter::convert(const float* src, float &x, float &y, float &z)
	{
		float X, Y, Z;
		XYZConverter::convertXYZ(src, X, Y, Z);

		// To D65 [Bradford]
		float X2 = 0.9531874f*X - 0.0265906f*Y + 0.0238731f*Z;
		float Y2 = -0.0382467f*X + 1.0288406f*Y + 0.0094060f*Z;
		float Z2 = 0.0026068f*X - 0.0030332f*Y + 1.0892565f*Z;

		x = 3.240479f * X2 - 1.537150f * Y2 - 0.498535f * Z2;
		y = -0.969256f * X2 + 1.875991f * Y2 + 0.041556f * Z2;
		z = 0.055648f * X2 - 0.204043f * Y2 + 1.057311f * Z2;

		x = std::max(x, 0.0f);
		y = std::max(y, 0.0f);
		z = std::max(z, 0.0f);
	}

	float RGBConverter::luminance(float r, float g, float b)
	{
		return 0.2126f*r + 0.7152f*g + 0.0722f*b;
	}

	void RGBConverter::gamma(float &x, float &y, float &z)
	{
		x = (x <= 0.0031308f) ? 12.92f*x : (1.055f*pow(x, 0.4166666f) - 0.055f);
		y = (y <= 0.0031308f) ? 12.92f*y : (1.055f*pow(y, 0.4166666f) - 0.055f);
		z = (z <= 0.0031308f) ? 12.92f*z : (1.055f*pow(z, 0.4166666f) - 0.055f);
	}

	/*
	 * An RGB to Spectrum Conversion for Reflectances
     * Brian Smits1, University of Utah 

	 * Custom variant
     */
	Spectrum RGBConverter::White{1.000303628, 1.000303628, 1.000303628, 1.000304289, 1.000304894, 1.000305466, 1.000305703, 1.000305883, 1.00030602, 1.000306089, 1.00030611, 1.00030612, 1.000306114, 1.000306115, 1.000306111, 1.000306111, 1.000306102, 1.00030463, 1.000300539, 1.000293071, 1.000281626, 1.000265639, 1.000246369, 1.000224825, 1.000201724, 1.000177776, 1.00015356, 1.000129457, 1.000105913, 1.000083238, 1.000061632, 1.000041489, 1.000023012, 1.000006103, 0.9999908469, 0.9999772639, 0.9999652841, 0.9999547627, 0.9999457185, 0.999938151, 0.9999318518, 0.999926576, 0.9999223028, 0.9999189268, 0.9999161723, 0.9999139574, 0.9999121676, 0.9999107853, 0.9999096434, 0.9999087343, 0.9999080479, 0.9999076192, 0.9999071721, 0.9999066275, 0.9999059855, 0.9999054658, 0.999904966, 0.9999046332, 0.9999045733, 0.9999045425, 0.9999043363, 0.9999040192, 0.9999036345, 0.9999030947, 0.9999026721, 0.9999023622, 0.999902197, 0.9999021175, 0.9999020369, 0.9999019637, 0.9999017237, 0.9999015016, 0.9999011958, 0.9999010455, 0.999900919, 0.9999009669, 0.9999009434, 0.9999008763, 0.9999008042, 0.9999008042, 0.9999008042};
	Spectrum RGBConverter::Cyan{0.9389077306, 0.9389475345, 0.9389772559, 0.9389606164, 0.9389868878, 0.939104386, 0.9394031873, 0.9399774164, 0.941073609, 0.9430272666, 0.9462596149, 0.9510854121, 0.9575376898, 0.9653998292, 0.9742430247, 0.9835668704, 0.9924120596, 1.000008413, 1.005325, 1.007114251, 1.007161087, 1.007161047, 1.007161515, 1.007161516, 1.007161292, 1.007161141, 1.007161426, 1.007161161, 1.007161346, 1.007161317, 1.007161315, 1.007161154, 1.00716106, 1.007161066, 1.007161363, 1.006530693, 0.9820668066, 0.9365217092, 0.8729160608, 0.7946717517, 0.7054935352, 0.6093055917, 0.50986485, 0.4108126065, 0.3154169849, 0.2262541366, 0.1453296482, 0.07386180835, 0.01239320275, -0.03920842526, -0.08158042178, -0.1157375063, -0.142693908, -0.1635402537, -0.1793262978, -0.1911135447, -0.1998469577, -0.2061756554, -0.2106670383, -0.2138875927, -0.2162021707, -0.217865066, -0.2190281476, -0.2198683425, -0.2204385699, -0.2208695621, -0.2211637552, -0.2213544336, -0.2215100795, -0.2216420751, -0.2217285677, -0.2217653311, -0.2217873311, -0.2217983108, -0.2218492349, -0.2218747032, -0.2218701094, -0.2218383517, -0.2218479681, -0.2218685917, -0.2218820242};
	Spectrum RGBConverter::Magenta{0.9999995537, 0.9968582408, 0.9939856903, 0.9940241647, 0.9975390982, 0.9999784145, 0.9999713712, 0.9999762193, 0.9999594003, 0.9999979754, 0.9999338845, 0.9999888338, 0.9999715008, 0.9999732455, 0.9999550175, 0.9996988834, 0.9721240801, 0.9242576051, 0.8598181593, 0.7779781914, 0.6889590279, 0.5926635455, 0.4935261679, 0.3957802487, 0.3009030879, 0.210363755, 0.1272799761, 0.05441859533, -0.004504748366, -0.05055928653, -0.07911172879, -0.09066741975, -0.08796759705, -0.06723095949, -0.03124700125, 0.01690763722, 0.07858598232, 0.1513950384, 0.2326009429, 0.3192728524, 0.4085793946, 0.4986490307, 0.5867594962, 0.6707007754, 0.7481391616, 0.8160895512, 0.8751722091, 0.9235547456, 0.9605871296, 0.9868308866, 0.9997694091, 0.9999452411, 0.9999557731, 0.9999911383, 0.9999999265, 0.9992528854, 0.9978119532, 0.9994567516, 0.9995046741, 0.9999299469, 0.9997861016, 0.9998973184, 0.9999677289, 0.9998926787, 0.9999826688, 0.9999164343, 0.9999450641, 0.9999883022, 0.9999893803, 0.9999788488, 0.999967694, 0.999998256, 0.9999683183, 0.9999652113, 0.9998807694, 0.9999970201, 0.9999955948, 0.9999806315, 0.9999997211, 0.9999437515, 0.9999525475};
	Spectrum RGBConverter::Yellow{-0.09596642044, -0.09549021404, -0.09530392796, -0.09487654595, -0.09458272137, -0.09365694473, -0.09268987391, -0.09026395489, -0.08654060016, -0.07945882088, -0.06834963243, -0.05120763268, -0.02782228926, 0.00300168922, 0.0414779492, 0.08717615812, 0.1392286253, 0.1976529979, 0.2613458406, 0.3284719961, 0.3985178921, 0.4702723005, 0.5419819155, 0.6121741209, 0.6800582985, 0.7449512875, 0.8052617073, 0.8594596813, 0.9064857365, 0.9446310132, 0.9737494636, 0.9926048109, 0.9999872894, 0.9999451433, 0.9999176007, 0.9999999954, 0.9999990858, 0.9997792557, 0.99999554, 0.9996195111, 0.9991671542, 0.9974939959, 0.9952125998, 0.9921411793, 0.9909517439, 0.9898077981, 0.9895968136, 0.9902196447, 0.9918353076, 0.9930410287, 0.9875280078, 0.9822913213, 0.9747439401, 0.9719168226, 0.9694576866, 0.9674336882, 0.9659112429, 0.9653689242, 0.9638908888, 0.9634652808, 0.963249088, 0.9630049165, 0.9629154847, 0.9626721197, 0.9619682167, 0.9614433013, 0.9612184264, 0.9613197694, 0.9614370543, 0.9610866168, 0.9613693485, 0.9614081306, 0.9612596683, 0.9611227387, 0.9616289391, 0.9616712942, 0.9619159187, 0.9623144637, 0.9625432956, 0.9623641998, 0.9622418315};
	Spectrum RGBConverter::Red{0.1048406067, 0.1047408689, 0.104619488, 0.1043334998, 0.1039583025, 0.1036055227, 0.1029673026, 0.1018442601, 0.1000922545, 0.09720911496, 0.09256380436, 0.08569868164, 0.07625649103, 0.06430764125, 0.04988910318, 0.03301768075, 0.01418929962, -0.006134871055, -0.0276065938, -0.04949160204, -0.07097996304, -0.09146212863, -0.110285884, -0.1267917622, -0.1404604026, -0.1502802865, -0.1555992926, -0.1553135667, -0.1483102635, -0.1342828498, -0.112532671, -0.0832494813, -0.04658021665, -0.002611329508, 0.04803465659, 0.1045354641, 0.1663304683, 0.2321336171, 0.3007491393, 0.3707639291, 0.4411115958, 0.5103169495, 0.57713743, 0.6402326126, 0.6983875749, 0.7512566434, 0.798029749, 0.8383413758, 0.8726422343, 0.9012574062, 0.9242886904, 0.9426824671, 0.9571875183, 0.9683282904, 0.9766824693, 0.9829187841, 0.9875338868, 0.9908093347, 0.9931209615, 0.9948659322, 0.9960912308, 0.9969768327, 0.9975586092, 0.99809578, 0.9984703046, 0.9988138721, 0.9989807734, 0.9991248054, 0.9992789441, 0.9994280642, 0.9995373267, 0.9997144474, 0.9997695554, 0.9998209741, 0.9998647588, 0.9998325882, 0.9999083634, 0.9999360414, 0.9999999007, 0.9999301031, 0.9999999447};
	Spectrum RGBConverter::Green{-0.1942600071, -0.1942137443, -0.1933005101, -0.1926933135, -0.1921241852, -0.191422932, -0.1900877647, -0.1863705152, -0.1802579767, -0.1697186372, -0.152920374, -0.1294200612, -0.09662990833, -0.05384574402, -0.001523423345, 0.05950508213, 0.1290633046, 0.2051869592, 0.2870852651, 0.3724283631, 0.4590743595, 0.5457628423, 0.6295162532, 0.7101220261, 0.7842886791, 0.8524724933, 0.9099491469, 0.9533738315, 0.9845696502, 0.9999999917, 0.9998633425, 0.9998813444, 0.9999704822, 0.9999072798, 0.9980189411, 0.9651895874, 0.9196193894, 0.8602434281, 0.7893309762, 0.7094010599, 0.6255649295, 0.5395177089, 0.4542076014, 0.3716663683, 0.2934795586, 0.2219447119, 0.1584306721, 0.1024753972, 0.05592173502, 0.01766747953, -0.0128605714, -0.03685881304, -0.0552293332, -0.06903457118, -0.07893693193, -0.08599364659, -0.09130198103, -0.0944887893, -0.09604051906, -0.09718747692, -0.09715701444, -0.09728456695, -0.09724119036, -0.09643830062, -0.0966959928, -0.09578143135, -0.09434171987, -0.09319686294, -0.09235314423, -0.09195898161, -0.09225168445, -0.09278032611, -0.09261057497, -0.09184770069, -0.09187413996, -0.09282929434, -0.0938619548, -0.09493721529, -0.09541661596, -0.09506578722, -0.0948096865};
	Spectrum RGBConverter::Blue{0.9997276945, 0.9999736178, 0.9996460513, 0.9989641381, 0.9995607038, 0.999973435, 0.9999999686, 0.9999420991, 0.9999370219, 0.9996538887, 0.9999754267, 0.9999171988, 0.9956878646, 0.9823449971, 0.9602067683, 0.9291142411, 0.8896288321, 0.8424916066, 0.7883863592, 0.7287450302, 0.6650099745, 0.5986403192, 0.5309232803, 0.4629783284, 0.3957477861, 0.3301322054, 0.2671925107, 0.2078336094, 0.1530934088, 0.1037818168, 0.06044913753, 0.02343110129, -0.007132027436, -0.03119405928, -0.04891979743, -0.06060405387, -0.06663467725, -0.06751126118, -0.06382634545, -0.05627653462, -0.04564088985, -0.0327278012, -0.01837107062, -0.003335948201, 0.01165668731, 0.02603088046, 0.03933763008, 0.05126647994, 0.06166251405, 0.07045501222, 0.07777678957, 0.08368984353, 0.08837827733, 0.09202721729, 0.09475224005, 0.09680731214, 0.09832794798, 0.0995158947, 0.1003775195, 0.1009630466, 0.1014290779, 0.1018024819, 0.1020826747, 0.1023038996, 0.1024932979, 0.1026600512, 0.1027981292, 0.1029293528, 0.1030363558, 0.1030910045, 0.103117482, 0.1031045291, 0.1030477074, 0.1029833096, 0.1028940172, 0.1028868128, 0.1028687383, 0.1027565657, 0.1027035587, 0.1026189917, 0.1025323798};

	Spectrum RGBConverter::toSpec(float r, float g, float b)
	{
		Spectrum spec;

		if (r <= g && r <= b)
		{
			spec = r * White;

			if (g <= b)
			{
				spec += (g - r) * Cyan;
				spec += (b - g) * Blue;
			}
			else
			{
				spec += (b - r) * Cyan;
				spec += (g - b) * Green;
			}
		}
		else if (g <= r && g <= b)
		{
			spec = g * White;
			if (r <= b)
			{
				spec += (r - g) * Magenta;
				spec += (b - r) * Blue;
			}
			else
			{
				spec += (b - g) * Magenta;
				spec += (r - b) * Red;
			}
		}
		else
		{
			spec = b * White;
			if (r <= g)
			{
				spec += (r - b) * Yellow;
				spec += (g - r) * Green;
			}
			else
			{
				spec += (g - b) * Yellow;
				spec += (r - g) * Red;
			}
		}

		return PR_CHECK_NEGATIVE(spec, "toSpec");
	}
}
