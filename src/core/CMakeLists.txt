set(PR_Src
  Random.h
  ServiceObserver.h
  ServiceObserver.inl
  buffer/AOV.h
  buffer/ColorBuffer.cpp
  buffer/ColorBuffer.h
  buffer/Feedback.h
  buffer/FrameBuffer.h
  buffer/FrameBufferSystem.cpp
  buffer/FrameBufferSystem.h
  buffer/FrameBufferBucket.cpp
  buffer/FrameBufferBucket.h
  buffer/FrameBufferContainer.cpp
  buffer/FrameBufferContainer.h
  buffer/FrameBufferContainer.inl
  buffer/VarianceEstimator.h
  buffer/VarianceEstimator.inl
  cache/ICachable.h
  cache/Cache.h
  cache/Cache.cpp
  cache/ISerializeCachable.h
  cache/ISerializeCachable.cpp
  camera/ICamera.cpp
  camera/ICamera.h
  container/kdTreeBuilder.cpp
  container/kdTreeBuilder.h
  container/kdTreeBuilderNaive.cpp
  container/kdTreeBuilderNaive.h
  container/HashGrid.h
  container/HashGrid.inl
  entity/GeometryRepr.h
  entity/IEntity.cpp
  entity/IEntity.h
  entity/IEntity.inl
  entity/ITransformable.cpp
  entity/ITransformable.h
  entity/ITransformable.inl
  emission/IEmission.cpp
  emission/IEmission.h
  filter/FilterCache.h
  filter/IFilter.h
  filter/IFilterFactory.h
  geometry/BoundingBox.cpp
  geometry/BoundingBox.h
  geometry/BoundingBox.inl
  geometry/Cone.cpp
  geometry/Cone.h
  geometry/Cylinder.cpp
  geometry/Cylinder.h
  geometry/Disk.cpp
  geometry/Disk.h
  geometry/Face.h
  geometry/GeometryPoint.h
  geometry/Plane.cpp
  geometry/Plane.h
  geometry/Quad.h
  geometry/Quadric.h
  geometry/Sphere.cpp
  geometry/Sphere.h
  geometry/Triangle.h
  infinitelight/IInfiniteLight.cpp
  infinitelight/IInfiniteLight.h
  integrator/IIntegrator.cpp
  integrator/IIntegrator.h
  integrator/IIntegratorFactory.h
  light/Light.cpp
  light/Light.h
  light/LightSampler.cpp
  light/LightSampler.h
  light/LightSampler.inl
  material/IMaterial.cpp
  material/IMaterial.h
  material/IMaterial.inl
  material/MaterialData.h
  material/MaterialType.h
  mesh/MeshBase.cpp
  mesh/MeshBase.h
  mesh/MeshBase.inl
  mesh/MeshInfo.h
  output/OutputQueue.cpp
  output/OutputQueue.h
  output/OutputQueue.inl
  path/LightPath.cpp
  path/LightPath.h
  path/LightPath.inl
  path/LightPathBuffer.cpp
  path/LightPathBuffer.h
  path/LightPathExpression.cpp
  path/LightPathExpression.h
  path/LightPathManager.cpp
  path/LightPathManager.h
  path/LightPathToken.h
  path/LightPathView.h
  path/LPE_Automaton.cpp
  path/LPE_Automaton.h
  path/LPE_Parser.cpp
  path/LPE_Parser.h
  path/LPE_RegExpr.cpp
  path/LPE_RegExpr.h
  path/LPE_RegState.h
  photon/Photon.h
  photon/PhotonMap.h
  photon/PhotonMap.inl
  random/pcg_extras.hpp
  random/pcg_random.hpp
  ray/Ray.h
  ray/RayGroup.h
  ray/RayGroupContainer.h
  ray/RayStream.cpp
  ray/RayStream.h
  renderer/RenderContext.cpp
  renderer/RenderContext.h
  renderer/RenderEnums.h
  renderer/RenderFactory.cpp
  renderer/RenderFactory.h
  renderer/RenderSettings.h
  renderer/RenderTileStatistics.h
  renderer/RenderStatus.h
  renderer/RenderSettings.cpp
  renderer/RenderStatus.cpp
  renderer/RenderThread.cpp
  renderer/RenderThread.h
  renderer/RenderThreadStatistics.cpp
  renderer/RenderThreadStatistics.h
  renderer/RenderTile.cpp
  renderer/RenderTile.h
  renderer/RenderTileMap.cpp
  renderer/RenderTileMap.h
  renderer/RenderTileSession.cpp
  renderer/RenderTileSession.h
  renderer/RenderTileStatistics.cpp
  renderer/RenderTileStatistics.h
  renderer/StreamPipeline.cpp
  renderer/StreamPipeline.h
  renderer/StreamPipeline.inl
  sampler/Distribution2D.cpp
  sampler/Distribution2D.h
  sampler/ISampler.h
  sampler/ISamplerFactory.h
  sampler/SampleArray.h
  scene/Scene.cpp
  scene/Scene.h
  spectral/Blackbody.h
  spectral/CIE.cpp
  spectral/CIE.h
  spectral/EquidistantSpectrum.h
  spectral/EquidistantSpectrum.inl
  spectral/ISpectralMapper.h
  spectral/ISpectralMapperFactory.h
  spectral/OrderedSpectrum.h
  spectral/OrderedSpectrum.inl
  spectral/ParametricBlob.h
  spectral/RGBConverter.cpp
  spectral/RGBConverter.h
  spectral/SpectralBlob.h
  spectral/SpectralUpsampler.cpp
  spectral/SpectralUpsampler.h
  spectral/ToneMapper.cpp
  spectral/ToneMapper.h
  shader/INode.h
  shader/NodeUtils.h
  shader/NodeUtils.cpp
  shader/ShadingContext.h
  shader/ShadingGroup.cpp
  shader/ShadingGroup.h
  shader/ShadingGroupBlock.h
  thread/Thread.cpp
  thread/Thread.h
  thread/Thread.inl
  trace/IntersectionPoint.h
  trace/HitEntry.h
  trace/HitPoint.h
  trace/HitStream.cpp
  trace/HitStream.h
)

add_library(pr_lib_core ${PR_Src})
target_link_libraries(pr_lib_core PUBLIC pr_lib_base std::filesystem TBB::tbb Embree::Embree)
set_target_properties(pr_lib_core PROPERTIES CXX_VISIBILITY_PRESET hidden)
target_include_directories(pr_lib_core PUBLIC 
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
  $<INSTALL_INTERFACE:${INCLUDE_PREFIX}/>)
if(NOT BUILD_SHARED_LIBS)
  target_compile_definitions(pr_lib_core PUBLIC "PR_LIB_CORE_STATIC")
  set_target_properties(pr_lib_core PROPERTIES POSITION_INDEPENDENT_CODE TRUE)
endif()
target_compile_definitions(pr_lib_core PRIVATE "PR_LIB_CORE_BUILD")
add_lto(pr_lib_core)
if(BUILD_SHARED_LIBS)
  strip_binary(pr_lib_core)
endif()

if(BUILD_SHARED_LIBS)
  set(INSTALL_COMPONENT runtime)
else()
  set(INSTALL_COMPONENT development)
endif()
set_target_properties(pr_lib_core PROPERTIES EXPORT_NAME core)
install(TARGETS pr_lib_core COMPONENT ${INSTALL_COMPONENT} EXPORT PearRay-targets)
installHeaderFiles(${PR_Src})