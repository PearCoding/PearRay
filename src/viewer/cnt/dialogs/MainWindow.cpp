#include "MainWindow.h"
#include "Container.h"

#include <fstream>

#include <QCloseEvent>
#include <QComboBox>
#include <QDesktopServices>
#include <QFileDialog>
#include <QImageWriter>
#include <QMessageBox>
#include <QSettings>

// We do not link to the library, only include the configuration file!
#include "PR_Config.h"

MainWindow::MainWindow(QWidget* parent)
	: QMainWindow(parent)
	, mContainer(nullptr)
{
	ui.setupUi(this);

	connect(ui.actionOpenScene, SIGNAL(triggered()), this, SLOT(openScene()));
	connect(ui.actionAbout, SIGNAL(triggered()), this, SLOT(about()));
	connect(ui.actionAboutQt, SIGNAL(triggered()), qApp, SLOT(aboutQt()));
	connect(ui.actionWebsite, SIGNAL(triggered()), this, SLOT(openWebsite()));
	connect(ui.actionQuit, SIGNAL(triggered()), this, SLOT(close()));
	connect(ui.maxDepthSlider, SIGNAL(valueChanged(int)), this, SLOT(depthChanged(int)));

	readSettings();
}

MainWindow::~MainWindow()
{
	if (mContainer) {
		delete mContainer;
	}
}

void MainWindow::openProject(const QString& str)
{
	if (!mContainer) {
		mContainer = new Container;
	}

	std::ifstream stream(str.toStdString());
	if (mContainer->load(stream)) {
		statusBar()->showMessage(tr("Loaded CNT"));

		ui.nodeCountLabel->setText(QString::number(mContainer->nodeCount()));
		ui.innerNodeCountLabel->setText(QString::number(mContainer->innerNodeCount()));
		ui.maxDepthLabel->setText(QString::number(mContainer->depth()));

		ui.maxDepthSlider->setMaximum(mContainer->depth());
		ui.maxDepthSlider->setValue(mContainer->depth());

		for (int i = 0; i < 3; ++i) {
			auto itemLow = ui.tableWidget->item(0, i);
			auto itemUp  = ui.tableWidget->item(1, i);

			itemLow->setText(QString::number(mContainer->lowerBound(i)));
			itemUp->setText(QString::number(mContainer->upperBound(i)));
		}

		ui.openGLWidget->clear();
		mContainer->populate(ui.openGLWidget->vertices(), ui.openGLWidget->indices(), mContainer->depth());
		ui.openGLWidget->rebuild();
	} else {
		statusBar()->showMessage(tr("Failed to load CNT"));
	}
}

void MainWindow::openScene()
{
	const QStringList docLoc = QStandardPaths::standardLocations(QStandardPaths::DocumentsLocation);
	QString file			 = QFileDialog::getOpenFileName(this, tr("Open File"),
												docLoc.isEmpty() ? QDir::currentPath() : docLoc.last(),
												tr("Container Files (*.cnt)"));

	if (!file.isEmpty())
		openProject(file);
}

void MainWindow::closeEvent(QCloseEvent* event)
{
	writeSettings();
	event->accept();
}

void MainWindow::readSettings()
{
	QSettings settings;

	settings.beginGroup("MainWindow");
	restoreGeometry(settings.value("geometry").toByteArray());
	restoreState(settings.value("state").toByteArray());
	settings.endGroup();
}

void MainWindow::writeSettings()
{
	QSettings settings;

	settings.beginGroup("MainWindow");
	settings.setValue("geometry", saveGeometry());
	settings.setValue("state", saveState());
	settings.endGroup();
}

void MainWindow::about()
{
	QMessageBox::about(this, tr("About PearRay CNT Viewer"),
					   tr("<h2>About PearRay CNT Viewer " PR_VERSION_STRING "</h2>"
						  "<p>A viewer for PearRay CNT files generated by internal bsp builders.</p>"
						  "<p>Author: &Ouml;mercan Yazici &lt;<a href='mailto:omercan@pearcoding.eu?subject=\"PearRay\"'>omercan@pearcoding.eu</a>&gt;<br/>"
						  "Copyright &copy; 2015-2018 &Ouml;mercan Yazici<br/>"
						  "Website: <a href='http://pearcoding.eu/projects/pearray'>http://pearcoding.eu/projects/pearray</a></p>"
						  "<hr /><p>Icon Set: <a href='https://design.google.com/icons/'>https://design.google.com/icons/</a></p>"
#ifdef PR_DEBUG
						  "<hr /><h4>Development Information:</h4><p>"
						  "Version: " PR_VERSION_STRING "<br />"
						  "Compiled: " __DATE__ " " __TIME__ "<br /></p>"
#endif
						  ));
}

void MainWindow::openWebsite()
{
	QDesktopServices::openUrl(QUrl("http://pearcoding.eu/projects/pearray"));
}

void MainWindow::depthChanged(int tick)
{
	if (mContainer) {
		ui.openGLWidget->clear();
		mContainer->populate(ui.openGLWidget->vertices(), ui.openGLWidget->indices(), tick);
		ui.openGLWidget->rebuild();
	}
}
